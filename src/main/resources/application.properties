#ENVIRONMENT VARIABLES:
# This application properties file contains information that is really sensitive...
# therefore, a good practice is using a ".env.properties" file and add it to gitIgnore to avoid pushing these values...
#to our repositories.
# To do so in Spring Boot we must create a ".env.properties" file and use:
# Spring.config.import=file:../.env.properties[.properties]


#SPRING SECURITY: This works with form login authentication only, use it for development process only.
#1.Application name
spring.application.name=${SPS_APP}
#2.Admin username
spring.security.user.name=${SPS_USER}
#3.Password
spring.security.user.password=${SPS_PASS}
#4.Rol for authorization
spring.security.user.roles=${SPS_ROL}

#SPRING DATA SOURCE:
#URL
#1-sql driver
#2-ip db server
#3-db name
#4-state ssl (false, true)
# SpringBoot doesn't support natively .env.properties files, so that it's better to name them as .env.properties.properties,
# that is the reason why we import it as [properties], however, in VM this doesn't work, so we must import it as .env.properties.properties
spring.config.import=file:./.env.properties
spring.datasource.url=jdbc:mysql://${MYSQL_HOST_AZ}:${MYSQL_PORT_AZ}/${MYSQL_DB_AZ}?useSSL=${MYSQL_SSL_AZ}
#DB Port: Use the next command in case that we need to use a specific port.
#server.port=${PORT:3307}
#USERNAME: defines the user that will access to the DB
spring.datasource.username=${MYSQL_USER_AZ}
#PASSWORD: Defines the password of the DB
spring.datasource.password=${MYSQL_PASSWORD_AZ}
#to configure the driver we have to use the next command
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#JPA HIBERNATE PROPERTIES:
#if we use another kind of db dialect such as PostgreSQL we have to change the dialect
#In this case the dialect is for MySQL.
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#To show sql queries into the console, this is useful when you are working with related entities.
#show JPA sql queries
spring.jpa.show-sql=true
#provide hibernate format Sql queries in order to become them easier to read
spring.jpa.properties.hibernate.format_sql=true
#this command is used to create table if it doesn't exist or update it.
#update, crate, drop
spring.jpa.hibernate.ddl-auto=update

